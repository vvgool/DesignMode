   访问者模式是对象的行为模式。访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构
则可以保持不变

访问者模式：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
1）访问者模式中对象结构存储了不同类型的元素对象，以供不同访问者访问。
2）访问者模式包括两个层次结构，一个是访问者层次结构，提供了抽象访问者和具体访问者，一个是元素层次结构，提供了抽象元素和具体元素。
相同的访问者可以以不同的方式访问不同的元素，相同的元素可以接受不同访问者以不同访问方式访问。在访问者模式中，增加新的访问者无须修改原有系统，
系统具有较好的可扩展性

适用性

在下列情况下使用Vi s i t o r模式：
• 一个对象结构包含很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作。
• 需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而你想避免让这些操作“污染”这些对象的类。 Visitor使得你可以将相关的操作集中起
来定义在一个类中。当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作。
• 定义对象结构的类很少改变，但经常需要在此结构上定义新的操作。改变对象结构类需要重定义对所有访问者的接口，这可能需要很大的代价。如果对象结
构类经常改变，那么可能还是在这些类中定义这些操作较好

模式的组成

    访问者模式包含如下角色：
    抽象访问者（Vistor）: — 为该对象结构中ConcreteElement的每一个类声明一个Visit操作。该操作的名字和特
    征标识了发送Visit请求给该访问者的那个类。这使得访问者可以确定正被访问元素
    的具体的类。这样访问者就可以通过该元素的特定接口直接访问它。
    具体访问者（ConcreteVisitor）: — 实现每个由Visitor声明的操作。每个操作实现本算法的一部分，而该算法片断乃是
    对应于结构中对象的类。ConcreteVisitor为该算法提供了上下文并存储它的局部状态。
    这一状态常常在遍历该结构的过程中累积结果。
     抽象元素（Element）：定义一个Accept操作，它以一个访问者为参数。
    具体元素（ConcreteElement）:   实现Accept操作，该操作以一个访问者为参数。
    对象结构（ObjectStructure）: 能枚举它的元素。可以提供一个高层的接口以允许该访问者访问它的元素。可以是一个复合或是一个集合，如一个列
    表或一个无序集合

访问者模式的优点:
•使得增加新的访问操作变得很容易。如果一些操作依赖于一个复杂的结构对象的话，那么一般而言，增加新的操作会很复杂。而使用访问者模式，增加新的操
作就意味着增加一个新的访问者类，因此，变得很容易。
•将有关元素对象的访问行为集中到一个访问者对象中，而不是分散到一个个的元素类中。
•访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。迭代子只能访问属于同一个类型等级结构的成员对象，而不能访问属于不同等级结
构的对象。访问者模式可以做到这一点。
•让用户能够在不修改现有类层次结构的情况下，定义该类层次结构的操作。
访问者模式的缺点:
•增加新的元素类很困难。在访问者模式中，每增加一个新的元素类都意味着要在抽象访问者角色中增加一个新的抽象操作，并在每一个具体访问者类中增加相
应的具体操作，违背了“开闭原则”的要求。
•破坏封装。访问者模式要求访问者对象访问并调用每一个元素对象的操作，这意味着元素对象有时候必须暴露一些自己的内部操作和内部状态，否则无法供访
问者访问。